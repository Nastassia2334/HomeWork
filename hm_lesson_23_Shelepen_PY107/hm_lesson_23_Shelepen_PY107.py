from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import bot_tok  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª config
import logging
import keyboard

storage = MemoryStorage()
# —Å–æ–∑–¥–∞–µ–º –±–æ—Ç
bot = Bot(bot_tok, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(filename='log.txt', level=logging.INFO,
                    format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s '
                           u'[%(asctime)s] %(message)s')

poem_winter = """–ë–µ–ª–∞—è –±–µ—Ä–µ–∑–∞ –ø–æ–¥ –º–æ–∏–º –æ–∫–Ω–æ–º
–ü—Ä–∏–Ω–∞–∫—Ä—ã–ª–∞—Å—å —Å–Ω–µ–≥–æ–º, —Ç–æ—á–Ω–æ —Å–µ—Ä–µ–±—Ä–æ–º.
–ù–∞ –ø—É—à–∏—Å—Ç—ã—Ö –≤–µ—Ç–∫–∞—Ö —Å–Ω–µ–∂–Ω–æ—é –∫–∞–π–º–æ–π
–†–∞—Å–ø—É—Å—Ç–∏–ª–∏—Å—å –∫–∏—Å—Ç–∏ –±–µ–ª–æ–π –±–∞—Ö—Ä–æ–º–æ–π.
–ò —Å—Ç–æ–∏—Ç –±–µ—Ä–µ–∑–∞ –≤ —Å–æ–Ω–Ω–æ–π —Ç–∏—à–∏–Ω–µ,
–ò –≥–æ—Ä—è—Ç —Å–Ω–µ–∂–∏–Ω–∫–∏ –≤ –∑–æ–ª–æ—Ç–æ–º –æ–≥–Ω–µ.
–ê –∑–∞—Ä—è, –ª–µ–Ω–∏–≤–æ, –æ–±—Ö–æ–¥—è –∫—Ä—É–≥–æ–º,
–û–±—Å—ã–ø–∞–µ—Ç –≤–µ—Ç–∫–∏ –Ω–æ–≤—ã–º —Å–µ—Ä–µ–±—Ä–æ–º.

–°–µ—Ä–≥–µ–π –ï—Å–µ–Ω–∏–Ω"""

poem_summer = """

–í–æ—Ç
–ò –ª–µ—Ç–æ –Ω–∞ –ø–æ—Ä–æ–≥–µ:
–†–µ—é—Ç –ø—á–µ–ª—ã-–Ω–µ–¥–æ—Ç—Ä–æ–≥–∏,
–í–µ–ª–∏—á–∞–≤–æ –∫–∞—Ä–∞—É–ª—è
–ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —É–ª—å–∏,
–ß—Ç–æ–±—ã –≤—Å—è–∫–∏–µ —Ç—Ä–µ–≤–æ–≥–∏
–ü–æ—Ç–æ–Ω—É–ª–∏ –≤ –º–µ—Ä–Ω–æ–º –≥—É–ª–µ,
–ö–∞–∫ –Ω–∞–±–∞—Ç—ã —Ç–æ–Ω—É—Ç –≤ –±–ª–∞–≥–æ–≤–µ—Å—Ç–µ,
–ò –≤ –∏—é–Ω–µ,
–ò –≤ –∏—é–ª–µ,
–ò –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
–í –∞–≤–≥—É—Å—Ç–µ.
–õ–µ–æ–Ω–∏–¥ –ú–∞—Ä—Ç—ã–Ω–æ–≤"""

poem_spring = """–¢—Ä–∞–≤–∫–∞ –∑–µ–ª–µ–Ω–µ–µ—Ç,
–°–æ–ª–Ω—ã—à–∫–æ –±–ª–µ—Å—Ç–∏—Ç;
–õ–∞—Å—Ç–æ—á–∫–∞ —Å –≤–µ—Å–Ω–æ—é
–í —Å–µ–Ω–∏ –∫ –Ω–∞–º –ª–µ—Ç–∏—Ç.

–° –Ω–µ—é —Å–æ–ª–Ω—Ü–µ –∫—Ä–∞—à–µ
–ò –≤–µ—Å–Ω–∞ –º–∏–ª–µ–π‚Ä¶
–ü—Ä–æ—â–µ–±–µ—á—å —Å –¥–æ—Ä–æ–≥–∏
–ù–∞–º –ø—Ä–∏–≤–µ—Ç —Å–∫–æ—Ä–µ–π!

–î–∞–º —Ç–µ–±–µ —è –∑–µ—Ä–µ–Ω,
–ê —Ç—ã –ø–µ—Å–Ω—é —Å–ø–æ–π,
–ß—Ç–æ –∏–∑ —Å—Ç—Ä–∞–Ω –¥–∞–ª–µ–∫–∏—Ö
–ü—Ä–∏–Ω–µ—Å–ª–∞ —Å —Å–æ–±–æ–π‚Ä¶
–ê–ª–µ–∫—Å–µ–π –ü–ª–µ—â–µ–µ–≤"""

poem_autumn = """–£–Ω—ã–ª–∞—è –ø–æ—Ä–∞! –û—á–µ–π –æ—á–∞—Ä–æ–≤–∞–Ω—å–µ!
–ü—Ä–∏—è—Ç–Ω–∞ –º–Ω–µ —Ç–≤–æ—è –ø—Ä–æ—â–∞–ª—å–Ω–∞—è –∫—Ä–∞—Å–∞ ‚Äî
–õ—é–±–ª—é —è –ø—ã—à–Ω–æ–µ –ø—Ä–∏—Ä–æ–¥—ã —É–≤—è–¥–∞–Ω—å–µ,
–í –±–∞–≥—Ä–µ—Ü –∏ –≤ –∑–æ–ª–æ—Ç–æ –æ–¥–µ—Ç—ã–µ –ª–µ—Å–∞,
–í –∏—Ö —Å–µ–Ω—è—Ö –≤–µ—Ç—Ä–∞ —à—É–º –∏ —Å–≤–µ–∂–µ–µ –¥—ã—Ö–∞–Ω—å–µ,
–ò –º–≥–ª–æ–π –≤–æ–ª–Ω–∏—Å—Ç–æ—é –ø–æ–∫—Ä—ã—Ç—ã –Ω–µ–±–µ—Å–∞,
–ò —Ä–µ–¥–∫–∏–π —Å–æ–ª–Ω—Ü–∞ –ª—É—á, –∏ –ø–µ—Ä–≤—ã–µ –º–æ—Ä–æ–∑—ã,
–ò –æ—Ç–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–µ–¥–æ–π –∑–∏–º—ã —É–≥—Ä–æ–∑—ã.
–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω"""


@dp.message_handler(commands=['start'])
async def start_bot(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text='–í—ã–±–∏—Ä–∞–π',
                           reply_markup=keyboard.start_kb, parse_mode='Markdown')


@dp.message_handler(content_types=['text'])
async def smile(message: types.Message):
    if message.text == '–ó–∏–º–∞':
        await bot.send_photo(chat_id=message.chat.id, photo=open("winter.png", "rb"))
        await bot.send_message(chat_id=message.chat.id, text=poem_winter,
                               parse_mode='Markdown')
    elif message.text == '–í–µ—Å–Ω–∞':
        await bot.send_photo(chat_id=message.chat.id, photo=open("spring.png", "rb"))
        await bot.send_message(chat_id=message.chat.id, text=poem_spring,
                               parse_mode='Markdown')
    #
    elif message.text == '–õ–µ—Ç–æ':
        await bot.send_photo(chat_id=message.chat.id, photo=open("summer.png", "rb"))
        await bot.send_message(chat_id=message.chat.id, text=poem_summer,
                               parse_mode='Markdown')

    else:
        await bot.send_photo(chat_id=message.chat.id, photo=open("autumn.png", "rb"))
        await bot.send_message(chat_id=message.chat.id, text=poem_autumn,
                               parse_mode='Markdown')
    await bot.send_message(chat_id=message.chat.id, text="–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?",
                           reply_markup=keyboard.kb_time, parse_mode='Markdown')


@dp.callback_query_handler(text_contains="like")
async def like(call: types.CallbackQuery):
    await bot.send_message(chat_id=call.message.chat.id, text="üòä",
                           reply_markup=keyboard.start_kb)


@dp.callback_query_handler(text_contains="no")
async def dislike(call: types.CallbackQuery):
    await bot.send_message(chat_id=call.message.chat.id, text="üò¢",
                           reply_markup=keyboard.start_kb)


if __name__ == "__main__":
    print("–ü—Ä–∏–≤–µ—Ç! –Ø –ë–æ—Ç –∏ —è –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    executor.start_polling(dp, skip_updates=True)
